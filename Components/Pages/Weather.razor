@page "/weather"
@using Google.Api.Gax.Grpc
@using Google.Maps.Places.V1
@using System.Linq
@using Google.Maps.Routing.V2
@using Google.Type
@rendermode InteractiveServer

@inject IConfiguration Configuration


<PageTitle>Weather</PageTitle>

<input type="text" @bind=SearchText @bind:event="oninput" />

<table class="table" id="foundPlacesTable">    
    <tbody>
        @foreach (var place in foundPlaces)
        {
            var p = place;
            <tr @onclick="@(() => AddPlace(p))">
                <td>@place.DisplayName.Text</td>                
                <td>@place.FormattedAddress</td>                

            </tr>
        }
    </tbody>
</table>

<table class="table">
    <thead>
        <tr>
            <th></th>
            <th>Place</th>
            <th></th>
            <th></th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var placeStruct in addedPlaces)
        {
            var ps = placeStruct;
            <tr>
                <td>@placeStruct.Index</td>
                <td>@placeStruct.Place.DisplayName.Text</td>                
                <td>@placeStruct.Place.FormattedAddress</td>
                <td><input type="number" @bind=ps.VisitHours /> hrs</td>
                <td>@placeStruct.MinutesAwayFromPreviousPlace min</td>
            </tr>
        }
    </tbody>
</table>

@code {


    private string searchText = "fugly";
    string SearchText
    {
        get => searchText;
        set
        {
            searchText = value;
            DebounceSearchInput(); 
        }
    }


    private CancellationTokenSource src = new();

    private List<Place> foundPlaces = new List<Place>();
    private List<AddedPlace> addedPlaces = new List<AddedPlace>();

    private class AddedPlace
    {
        public int Index { get; set; }
        public decimal VisitHours { get; set; }
        public long SecondsAwayFromPreviousPlace { get; set; }
        public long MinutesAwayFromPreviousPlace => SecondsAwayFromPreviousPlace / 60;
        public Place Place { get; set; }
    }

    private void AddPlace(Place place)
    {
        int nextIndex = addedPlaces.Count + 1;
        addedPlaces.Add(new AddedPlace
            {
                Index = nextIndex,
                Place = place
            });

        UpdateSecondsAwayOnPlaces();
    }

    private void UpdateSecondsAwayOnPlaces()
    {
        RoutesClient client = new RoutesClientBuilder
            {
                ApiKey = Configuration["GoogleAPIKey"]
            }.Build();

        foreach (var place in addedPlaces)
        {
            var currentPlace = place;
            var previousPlace = addedPlaces.FirstOrDefault(x => x.Index == currentPlace.Index - 1);

            if (previousPlace == null)
            {
                currentPlace.SecondsAwayFromPreviousPlace = 0;
                continue; 
            }


            CallSettings callSettings = CallSettings.FromHeader("X-Goog-FieldMask", "routes.legs.steps.transitDetails");
            ComputeRoutesRequest request = new ComputeRoutesRequest
                {
                    Origin = new Waypoint
                    {
                        //Location = new Location { LatLng = new LatLng { Latitude = 37.419734, Longitude = -122.0827784 } }
                        //Address = "Humberto Delgado Airport, Portugal"
                        Address = previousPlace.Place.FormattedAddress
                        //Location = new Location { LatLng = new LatLng { Latitude = previousPlace.Place.Location.Latitude, Longitude = previousPlace.Place.Location.Longitude} },
                        //Address = previousPlace.Place.PlusCode.CompoundCode,
                        //PlaceId = previousPlace.Place.Id
                    },
                    Destination = new Waypoint
                    {
                        //Location = new Location { LatLng = new LatLng { Latitude = 37.417670, Longitude = -122.079595 } }
                        //Address = "Basílica of Estrela, Praça da Estrela, 1200-667 Lisboa, Portugal"
                        Address = currentPlace.Place.FormattedAddress
                        //Location = new Location { LatLng = new LatLng { Latitude = currentPlace.Place.Location.Latitude, Longitude = currentPlace.Place.Location.Longitude } },
                        //Address = currentPlace.Place.PlusCode.CompoundCode,
                        //PlaceId = currentPlace.Place.Id
                    },
                    TravelMode = RouteTravelMode.Transit,
                    ComputeAlternativeRoutes = true
                };
            ComputeRoutesResponse response = client.ComputeRoutes(request, callSettings);
            currentPlace.SecondsAwayFromPreviousPlace = response.Routes.FirstOrDefault()?.Duration.Seconds ?? 0;

        }
    }

    private async Task DebounceSearchInput()
    {
        src.Cancel();
        src = new();
        await Task.Delay(1000, src.Token).ContinueWith(UpdateFoundPlaces, src.Token);
    }

    private void UpdateFoundPlaces(Task obj)
    {
        PlacesClient client = new PlacesClientBuilder
            {
                ApiKey = Configuration["GoogleAPIKey"]
            }.Build();
        CallSettings callSettings = CallSettings.FromHeader("X-Goog-FieldMask", "*");
        SearchTextRequest request = new SearchTextRequest
            {
                TextQuery = searchText
            };
        SearchTextResponse response = client.SearchText(request, callSettings);
        foundPlaces = response.Places.ToList();
    }
}
